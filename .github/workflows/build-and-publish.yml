name: Build and Publish Container Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ${{ vars.REGISTRY != '' && vars.REGISTRY || 'docker.io/dawker' }}
  PLATFORMS: ${{ vars.PLATFORMS != '' && vars.PLATFORMS || 'linux/amd64,linux/arm64' }}

concurrency:
  # Serialise runs per branch so version tags are reserved before the next build starts
  group: build-and-publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  determine-tag:
    runs-on: self-hosted
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.bump-version.outputs.new_tag }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next tag
        id: bump-version
        run: |
          git fetch --tags --force
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" ]]; then
            new_tag="v1.0.0"
          elif [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
          else
            echo "Latest tag '$latest_tag' does not match expected format vMAJOR.MINOR.PATCH" >&2
            exit 1
          fi
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

  build-and-push:
    runs-on: self-hosted
    needs: determine-tag
    env:
      VERSION: ${{ needs.determine-tag.outputs.tag }}
    strategy:
      matrix:
        include:
          - name: agent
            context: ./agent
            image: homelab-map-agent
          - name: aggregator
            context: ./aggregator
            image: homelab-map-aggregator
          - name: frontend
            context: ./frontend
            image: homelab-map-frontend
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Determine registry host
        id: registry
        run: |
          registry="${REGISTRY}"
          if [[ "$registry" == */* ]]; then
            host="${registry%%/*}"
          else
            host="$registry"
          fi
          echo "host=$host" >> "$GITHUB_OUTPUT"

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry.outputs.host }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}

  push-tag:
    runs-on: self-hosted
    needs:
      - determine-tag
      - build-and-push
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push tag after successful build
        run: |
          git fetch --tags --force
          git tag "${{ needs.determine-tag.outputs.tag }}"
          git push origin "${{ needs.determine-tag.outputs.tag }}"
